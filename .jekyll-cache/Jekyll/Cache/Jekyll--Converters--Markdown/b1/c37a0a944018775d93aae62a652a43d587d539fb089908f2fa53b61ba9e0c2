I"ÅD<h2 id="tutorial">Tutorial</h2>
<p><a href="https://medium.com/data-science-school/practical-apache-spark-in-10-minutes-part-7-graphx-and-neo4j-b6b01cffa4fd" target="_blank">Practical Apache Spark in 10 minutes. Part 7 â€” GraphX and Neo4j</a></p>
<h2 id="practice">Practice</h2>
<ul>
  <li>Because I had not install Hadoop and Spark, I installed them following <a style="color:blue;" href="https://medium.com/data-science-school/practical-apache-spark-in-10-minutes-part-1-ubuntu-installation-f69bbb17ee9d" target="_blank">this</a>
    <ol>
      <li><strong>Install Java</strong><br />
<img src="/images/2019-09-30/java_version.png" /></li>
      <li><strong>Install Hadoop</strong><br />
Hadoop port:<br />
<a href="https://stackoverflow.com/questions/22855232/default-namenode-port-of-hdfs-is-50070-but-i-have-come-across-at-some-places-802" target="_blank">
<img src="/images/2019-09-30/hadoop_port.png" />
</a>
Result:
<img src="/images/2019-09-30/hadoop_test.png" /></li>
      <li><strong>Install Spark</strong><br />
<img src="/images/2019-09-30/spark_res.png" /><br /></li>
    </ol>
  </li>
  <li>
    <p>Back to the tutortial:</p>

    <ol>
      <li><strong>Prepare the data using pandas</strong>:
        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span>
<span class="n">edges</span> <span class="o">=</span> <span class="n">pandas</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"copperfield_edges.csv"</span><span class="p">)</span>
<span class="n">nodes</span> <span class="o">=</span> <span class="n">pandas</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"copperfield_nodes.csv"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"nodes: "</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">nodes</span><span class="p">)</span>
<span class="k">print</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"edges: "</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">edges</span><span class="p">)</span>
<span class="k">print</span><span class="p">()</span>
<span class="n">from_tab</span> <span class="o">=</span> <span class="n">pandas</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">nodes</span><span class="p">,</span><span class="n">edges</span><span class="p">,</span><span class="n">left_on</span><span class="o">=</span><span class="s">'name'</span><span class="p">,</span><span class="n">right_on</span><span class="o">=</span><span class="s">'from'</span><span class="p">)[[</span><span class="s">'part_of_speech'</span><span class="p">,</span><span class="s">'from'</span><span class="p">,</span><span class="s">'to'</span><span class="p">]]</span>
<span class="k">print</span><span class="p">(</span><span class="s">"from_tab: "</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">from_tab</span><span class="p">)</span>
<span class="n">to_tab</span> <span class="o">=</span> <span class="n">pandas</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">nodes</span><span class="p">,</span><span class="n">edges</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s">'name'</span><span class="p">,</span><span class="n">right_on</span><span class="o">=</span><span class="s">'to'</span><span class="p">)[[</span><span class="s">'part_of_speech'</span><span class="p">,</span><span class="s">'to'</span><span class="p">,</span><span class="s">'from'</span><span class="p">]]</span>
<span class="k">print</span><span class="p">(</span><span class="s">"to_tab: "</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">to_tab</span><span class="p">)</span>
<span class="k">print</span><span class="p">()</span>
<span class="n">from_tab</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="p">{</span><span class="s">"part_of_speech"</span><span class="p">:</span> <span class="s">"pos_from"</span><span class="p">},</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">to_tab</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="p">{</span><span class="s">"part_of_speech"</span><span class="p">:</span> <span class="s">"pos_to"</span> <span class="p">},</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="n">tab</span> <span class="o">=</span> <span class="n">pandas</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">from_tab</span><span class="p">,</span> <span class="n">to_tab</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="p">[</span><span class="s">"to"</span><span class="p">,</span><span class="s">"from"</span><span class="p">])[[</span><span class="s">"pos_from"</span><span class="p">,</span><span class="s">"from"</span><span class="p">,</span><span class="s">"pos_to"</span><span class="p">,</span><span class="s">"to"</span><span class="p">]]</span>
<span class="k">print</span><span class="p">(</span><span class="s">"tab table: "</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">tab</span><span class="p">)</span>
</code></pre></div>        </div>
        <p><strong>Result:</strong><br />
<img src="/images/2019-09-30/node_edge.png" />
<img src="/images/2019-09-30/tab_table.png" /></p>

        <p><strong>Explaination:</strong></p>
        <ul>
          <li>
            <p><strong>pandas.DataFrame</strong>: Two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes (rows and columns). Arithmetic operations align on both row and column labels. Can be thought of as a dict-like container for Series objects. The primary pandas data structure.
 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html" target="_blank"><strong><em>Visit documentâ€™s site</em></strong></a><br />
  <em>Example</em>:<br />
  . Constructing DataFrame from a dictionary:</p>

            <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="o">&gt;&gt;&gt;</span> <span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s">'col1'</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="s">'col2'</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]}</span>
  <span class="o">&gt;&gt;&gt;</span> <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">d</span><span class="p">)</span>
  <span class="o">&gt;&gt;&gt;</span> <span class="n">df</span>
</code></pre></div>            </div>

            <pre style="background-color:grey; display:inline-block">
      col1    col2
  0       1       3
  1       2       4       
  </pre>

            <p>. Constructing DataFrame from numpy ndarray:</p>

            <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="o">&gt;&gt;&gt;</span> <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]]),</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">])</span>
  <span class="o">&gt;&gt;&gt;</span> <span class="n">df</span>
</code></pre></div>            </div>
            <pre style="background-color:grey; display:inline-block">
     a  b  c  
  0  1  2  3  
  1  4  5  6  
  2  7  8  9  
  </pre>
          </li>
          <li><strong>pandas.read_csv()</strong>: Read data from csv file to DataFrame. <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html" target="_blank"><strong><em>Visit documentâ€™s site</em></strong></a></li>
          <li><strong>pandas.merge()</strong>: Merge two DataFrame ( similar to join in SQL). <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html" target="_blank"><strong><em>Visit documentâ€™s site</em></strong></a>  <br />
      In the above example:            <br />
          _ <strong>from_tab</strong> is the inner join of <strong>nodes</strong> and <strong>edges</strong> on edges.name = nodes.from<br />
          _ <strong>to_tab</strong> is the inner join of <strong>nodes</strong> and <strong>edges</strong> on edges.name = nodes.to<br />
          _ <strong>tab</strong> is the inner join of <strong>from_tab</strong> and <strong>to_tab</strong> on both columns to, from<br /></li>
        </ul>
      </li>
      <li><strong>Connect and load data to Neo4j</strong>:
        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">py2neo</span> <span class="kn">import</span> <span class="n">Graph</span><span class="p">,</span> <span class="n">Node</span><span class="p">,</span> <span class="n">Relationship</span>
<span class="c1">#Connect as user "neo4j" to "bolt://localhost:7687" with password="password"
</span><span class="n">graph</span> <span class="o">=</span> <span class="n">Graph</span><span class="p">(</span><span class="s">"bolt://localhost:7687"</span><span class="p">,</span><span class="n">auth</span><span class="o">=</span><span class="p">(</span><span class="s">"neo4j"</span><span class="p">,</span> <span class="s">"password"</span><span class="p">))</span>
<span class="n">graph</span><span class="o">.</span><span class="n">delete_all</span><span class="p">()</span>
<span class="c1">#Iterate in row of "tab" which is created above
</span><span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">tab</span><span class="o">.</span><span class="n">iterrows</span><span class="p">():</span>
  <span class="c1">#Create node_a and node_b then connect them with Relationship "with"
</span>  <span class="n">node_a</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">"pos_from"</span><span class="p">],</span> <span class="n">name</span><span class="o">=</span><span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">"from"</span><span class="p">])</span>
  <span class="n">node_b</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">"pos_to"</span><span class="p">],</span> <span class="n">name</span><span class="o">=</span><span class="n">row</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">"to"</span><span class="p">])</span>
  <span class="n">rel</span> <span class="o">=</span> <span class="n">Relationship</span><span class="p">(</span><span class="n">node_a</span><span class="p">,</span> <span class="s">"with"</span><span class="p">,</span> <span class="n">node_b</span><span class="p">)</span>
  <span class="n">graph</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">rel</span><span class="p">,</span> <span class="s">"with"</span><span class="p">,</span> <span class="s">"name"</span><span class="p">)</span>
</code></pre></div>        </div>
        <p><strong>Explainations:</strong><br /></p>
        <ul>
          <li><strong>py2neo.database â€“ Graph Databases</strong>:  <a href="https://py2neo.org/v3/database.html" target="_blank"><strong><em>Visit documentâ€™s site</em></strong></a></li>
          <li><strong>pandas.DataFrame.iterrows</strong>: Iterate over DataFrame rows as (index, Series) pairs. <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iterrows.html" target="_blank"><strong><em>Visit documentâ€™s site</em></strong></a>.<br />
  Eg: first row of <strong>tab</strong>:<br />
  <img src="/images/2019-09-30/first_row.png" /></li>
          <li><strong>py2neo.data</strong>:  <a href="https://py2neo.org/v4/data.html" target="_blank"><strong><em>Visit documentâ€™s site</em></strong></a>           <br />
   . <strong>class py2neo.data.Node(*labels, **properties)</strong>: Construct a new node object with the labels and properties specified. In its initial state, a node is unbound. This means that it exists only on the client and does not reference a corresponding server node. A node is typically bound by creating it in a Neo4j database.<br />
   . In the above code: label is <strong>noun</strong> or <strong>adjective</strong> and property is the word.<br />
   . <strong>class py2neo.data.Relationship(start_node, type, end_node, **properties)</strong>: Construct a relationship between a pair of nodes (or between a node and itself) of type type.<br />
   . <strong>merge(subgraph, primary_label=None, primary_key=None)</strong>: Create or update the nodes and relationships of a local subgraph in the remote database.</li>
        </ul>
      </li>
      <li><strong>Data analysis with Spark</strong>: <br />
 In terminal:
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   ./bin/spark-shell --conf spark.neo4j.bolt.password=password --packages neo4j-contrib:neo4j-spark-connector:2.2.1-M5
</code></pre></div>        </div>
        <p>Result:
 <img src="/images/2019-09-30/result_spark.png" /></p>

        <div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">import</span> <span class="nn">org.neo4j.spark._</span>
 <span class="k">import</span> <span class="nn">org.apache.spark.graphx._</span>
 <span class="k">import</span> <span class="nn">org.apache.spark.graphx.lib._</span>

 <span class="k">val</span> <span class="nv">neo</span> <span class="k">=</span> <span class="nc">Neo4j</span><span class="o">(</span><span class="n">sc</span><span class="o">)</span>

 <span class="k">val</span> <span class="nv">graphQuery</span> <span class="k">=</span> <span class="s">"""MATCH (n)-[r]-&gt;(m)
 RETURN id(n) as source,
 id(m) as target,
 type(r) as value
 SKIP {_skip} LIMIT {_limit}"""</span>

 <span class="k">val</span> <span class="nv">graph</span><span class="k">:</span> <span class="kt">Graph</span><span class="o">[</span><span class="kt">Long</span>, <span class="kt">String</span><span class="o">]</span> <span class="k">=</span><span class="nv">neo</span><span class="o">.</span><span class="py">rels</span><span class="o">(</span><span class="n">graphQuery</span><span class="o">).</span><span class="py">partitions</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="py">batch</span><span class="o">(</span><span class="mi">200</span><span class="o">).</span><span class="py">loadGraph</span>

 <span class="nv">graph</span><span class="o">.</span><span class="py">vertices</span><span class="o">.</span><span class="py">count</span>
 <span class="nv">graph</span><span class="o">.</span><span class="py">edges</span><span class="o">.</span><span class="py">count</span>

 <span class="k">val</span> <span class="nv">g</span> <span class="k">=</span> <span class="nv">PageRank</span><span class="o">.</span><span class="py">run</span><span class="o">(</span><span class="n">graph</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
 <span class="nv">Neo4jGraph</span><span class="o">.</span><span class="py">saveGraph</span><span class="o">(</span><span class="n">sc</span><span class="o">,</span> <span class="n">g</span><span class="o">,</span> <span class="s">"rank"</span><span class="o">)</span>
</code></pre></div>        </div>

        <p>Result:
 <img src="/images/2019-09-30/result2.png" /></p>
      </li>
    </ol>
  </li>
</ul>

:ET